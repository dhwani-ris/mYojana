[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<p>Top eligible schemes depicted are only for the schemes for which rules have been created.</p>\n<div id=\"table\"></div>",
  "modified": "2024-03-01 12:32:47.180669",
  "name": "Top eligible schemes",
  "private": 0,
  "roles": [],
  "script": "const get_milestone_schemes = async() => {\n    return frappe.call({\n        method: \"myojana.api.top_schemes\",\n        callback:(r) => {\n            if (r.message) {\n                return r.message;\n            }\n        },\n    });\n}\n\nconst render_table = async()=>{\n    const response = await get_milestone_schemes()\n    let milestones = response.message;\n    console.log(\"milestones\",milestones)\n    let tblHead = `\n        <tr>\n            <th scope=\"col\"></th>\n            <th scope=\"col\">Scheme</th>\n            <th scope=\"col\"> Eligible Beneficiaries</th>\n        </tr>\n    `\n    let rows = [];\n    for(let milestone of milestones){\n        if(!milestone.schemes?.length){\n            continue;\n        }\n        rows.push(`\n            <tr class=\"h5 border-top border-left border-right border-bottom\">\n                <td style=\"text-align:center;\" colspan=\"3\">${milestone.name}</td>\n            </tr>\n        `)\n        \n        for(const [index, scheme] of milestone.schemes.entries()){\n            rows.push(`\n                <tr class=\"border-left border-right\">\n                    <td scope=\"col\">${(index +1)}</td>\n                    <td scope=\"col\"><a href=\"/app/scheme/${scheme.name}\">${scheme.name}</a></td>\n                    <td scope=\"col\">${scheme.ben_count}</td>\n                </tr>\n            `)  \n        }\n        rows.push(`\n            <tr class=\"h5 border-top\">\n                <td colspan=\"3\">\\n</td>\n            </tr>\n        `)\n    }\n    let table = `\n        <table class=\"table table-bordered\">\n            ${tblHead}\n            ${rows.join('\\n')}\n        </table>\n    `;\n    root_element.getElementById('table').innerHTML = table;\n    \n}\n\n\nrender_table()",
  "style": ".border-top{\n    border-top:2px solid #818181 !important;\n}\n.border-left{\n    border-left:2px solid #818181 !important;\n}\n.border-right{\n    border-right:2px solid #818181 !important;\n}\n.border-bottom{\n    border-bottom:2px solid #818181 !important;\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"details-container\">\n    <p>Beneficiaries schemes details</p>\n    <button id=\"export-button\">Export</button>\n</div>\n\n<div id=\"table\"></div>\n<div id=\"pagination\"></div>\n\n",
  "modified": "2024-05-09 13:25:15.952870",
  "name": "Beneficiaries scheme",
  "private": 0,
  "roles": [],
  "script": "frappe.call({\n    method: \"myojana.sva_report.controllers.get_report_data.execute\",\n    args: { doc: \"Beneficiary Profiling\"},\n    callback: function(response) {\n        if (response.message && response.message.data && response.message.columns) {\n            var allData = response.message.data; // All data from the API\n            var columns = response.message.columns;\n\n            // Pagination settings\n            var pageSize = 50; // Number of items per page\n            var currentPage = 1; // Current page number\n            var totalItems = allData.length; // Total number of items\n            var totalPages = Math.ceil(totalItems / pageSize); // Total number of pages\n\n            // Function to render table rows for the current page\n          function renderTableRows() {\n            var startIndex = (currentPage - 1) * pageSize;\n            var endIndex = Math.min(startIndex + pageSize, totalItems);\n            var tableRows = '';\n        \n            // Fetch data for the current page\n            var currentPageData = allData.slice(startIndex, endIndex);\n        \n            for (var i = 0; i < currentPageData.length; i++) {\n                tableRows += \"<tr>\" + columns.map(function(column) {\n                    return \"<td>\" + currentPageData[i][column.fieldname] + \"</td>\";\n                }).join('') + \"</tr>\";\n            }\n        \n            return tableRows;\n        }\n            // Function to render pagination controls\n            function renderPagination() {\n                var pagination = '<ul class=\"pagination\">';\n\n                // Previous button\n                pagination += `<li class=\"page-item ${currentPage === 1 ? 'disabled' : ''}\">\n                                <a class=\"page-link\" onclick=\"prevPage()\">Previous</a>\n                              </li>`;\n\n                // Page numbers\n                for (var i = 1; i <= totalPages; i++) {\n                    pagination += `<li class=\"page-item ${currentPage === i ? 'active' : ''}\">\n                                    <a class=\"page-link\" onclick=\"goToPage(${i})\">${i}</a>\n                                  </li>`;\n                }\n\n                // Next button\n                pagination += `<li class=\"page-item ${currentPage === totalPages ? 'disabled' : ''}\">\n                                <a class=\"page-link\" onclick=\"nextPage()\">Next</a>\n                              </li>`;\n\n                pagination += '</ul>';\n\n                return pagination;\n            }\n\n          // Define functions in the global scope or attach them to an object\n                window.goToPage = function(page) {\n                    currentPage = page;\n                    render();\n                };\n                \n                window.nextPage = function() {\n                    if (currentPage < totalPages) {\n                        currentPage++;\n                        render();\n                    }\n                };\n                \n                window.prevPage = function() {\n                    if (currentPage > 1) {\n                        currentPage--;\n                        render();\n                    }\n                };\n\n            // Function to render the table and pagination\n            function render() {\n                var table = `<table class=\"table\"><thead><tr>${columns.map(column => `<th>${column.label}</th>`).join('')}</tr></thead><tbody>${renderTableRows()}</tbody></table>`;\n\n                var pagination = renderPagination();\n\n                // Append the generated table and pagination to the table element\n                var tableElement = root_element.getElementById('table');\n                var paginationElement = root_element.getElementById('pagination');\n                tableElement.innerHTML = table;\n                pageSize < 51 ? \"\" : paginationElement.innerHTML = pagination;\n            }\n\n            // Initial render\n            render();\n\n        } else {\n            console.error(\"Invalid data returned from the API\");\n        }\n    }\n});\n\n\nroot_element.getElementById(\"export-button\").addEventListener(\"click\", function() {\n    // Make API call to export data\n    frappe.call({\n        method: \"myojana.sva_report.controllers.get_report_data.execute\",\n        args: {doc: \"Beneficiary Profiling\", \"csv_exporz\": 1},    \n        callback: function(response) {\n            // Handle response\n            if (response.message) {\n                // Data exported successfully, handle download\n                downloadTableAsCSV(response.message.data, \"exported_data.csv\");\n            } else {\n                // Error occurred, handle it here\n                alert(\"Error exporting data: \" + response.exc);\n            }\n        }\n    });\n});\n\nfunction downloadTableAsCSV(data, filename) {\n    // Convert data to CSV format\n    var csv = convertToCSV(data);\n\n    // Create a Blob\n    var blob = new Blob([csv], { type: 'text/csv' });\n\n    // Create a temporary link\n    var link = document.createElement(\"a\");\n    link.href = window.URL.createObjectURL(blob);\n    link.download = filename;\n\n    // Trigger download\n    document.body.appendChild(link);\n    link.click();\n}\n\nfunction convertToCSV(data) {\n    var csv = '';\n    // Extract column headers\n    var headers = Object.keys(data[0]);\n    csv += headers.join(',') + '\\n';\n\n    // Extract rows\n    data.forEach(function(row) {\n        var values = headers.map(function(header) {\n            return row[header];\n        });\n        csv += values.join(',') + '\\n';\n    });\n\n    return csv;\n}\n\n\n\n",
  "style": "#table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top:20px;\n}\n\n#table th {\n    background-color: #f2f2f2;\n}\n\n.details-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n#export-button {\n    background-color: #f2f2f2; /* blue color, you can change it */\n    border: none;\n    padding: 5px 13px;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div style=\"width:100%;height:auto;\">\n    <div id=\"tabs_element\" style=\"width:100%;height:auto;gap:5px;overflow:auto;margin-bottom:10px;\" class=\"d-flex\"></div>\n    <div class=\"d-flex justify-content-between align-items-start\" style=\"margin-bottom:15px;gap:40px;height:auto;\">\n        <div id=\"chips_element\" class=\"d-flex\" style=\"gap:10px;flex-wrap:wrap;\"></div>\n        <div id=\"my_filter_btn\" style=\"\"></div>\n    </div>\n    <div id=\"filters_element\"></div>\n    <div id=\"number_cards_element\" class=\"row\"></div>\n</div>",
  "modified": "2024-07-26 11:25:54.844340",
  "name": "SVA Dashboard",
  "private": 0,
  "roles": [],
  "script": "function callAPI(options) {\n    return new Promise((resolve, reject) => {\n        frappe.call({\n            ...options,\n            callback: async function (response) {\n                resolve(response?.message || response);\n            },\n            error: function (error) {\n                console.error('API call failed:', error);\n                reject(error);\n            }\n        });\n    });\n}\n\nlet tabs_json = [];\nlet filters_json = [];\nlet applied_filter_object = {};\nlet active_tab;\nconst render_filter_chips = async (applied_filters) => {\n    let chips_element = root_element.querySelector(\"#chips_element\");\n    let chips_html = ``;\n    if(Object.entries(applied_filters).length > 0){\n        for(let [key,value] of Object.entries(applied_filters)){\n            let filter_doc = filters_json.find((filter)=>filter.fieldname == key);\n            let get_doc = await frappe.db.get_value(filter_doc.options,value,filter_doc.title_field)\n            let filter_value = get_doc.message[filter_doc.title_field]\n            chips_html += `\n            <div class=\"btn-group\">\n                <button class=\"btn btn-sm btn-secondary custom_filter_chip\">\n                    <span class=\"button-label\">${filter_doc.label}:${filter_value}</span>\n                </button>\n                <button class=\"btn btn-default btn-sm custom_filter_clear_chip\" name=\"${key}\" title=\"Clear this filters\">\n                    <span class=\"filter-icon\" name=\"${key}\">&times;</span>\n                </button>\n            </div>\n            `;\n        }\n        chips_element.innerHTML = chips_html\n    }else{\n        chips_element.innerHTML = ``\n    }\n    single_filter_clear_control()\n}\nlet single_filter_clear_control = () => {\n    let btns = root_element.querySelectorAll(\".custom_filter_clear_chip\");\n    btns.forEach((btn) => {\n        btn.addEventListener('click', async (event) => {\n            let filter_name = event.target.getAttribute('name');\n            delete applied_filter_object[filter_name];\n            render_filter_chips(applied_filter_object)\n            render_filter_button(filters_json,applied_filter_object)\n            get_number_cards(active_tab,applied_filter_object)\n        });\n    });\n}\n\nlet render_tabs = async () => {\n    try {\n        let tabs = await callAPI({\n            method: 'myojana.apis.sva_dashboard.get_dashboards_list',\n        });\n        tabs_json = tabs;\n        let tab_element = root_element.querySelector(\"#tabs_element\");\n        let tab_html = ``;\n        if (tabs.length > 0) {\n            for (let i = 0; i < tabs.length; i++) {\n                let tab = tabs[i];\n                if (i === 0) {\n                    tab_html += `<span class=\"tab_span tab_active\" name=\"${tab.name}\">${tab.title}</span>`;\n                } else {\n                    tab_html += `<span class=\"tab_span\" name=\"${tab.name}\">${tab.title}</span>`;\n                }\n            }\n        }\n        tab_element.innerHTML = tab_html;\n    } catch (error) {\n        console.error('Error rendering tabs:', error);\n    }\n}\nconst render_filter_button = (filters_data=filters_json,applied_filters={}) => {\n    let btn_element = root_element.querySelector(\"#my_filter_btn\");\n    let applied_filters_length = Object.entries(applied_filters).length\n    let btn_html = `\n        <div class=\"btn-group\" style=\"min-width:120px;\">\n            <button class=\"btn btn-sm\" id=\"custom_filter_btn\" style=\"background-color:${applied_filters_length != 0 ? '#E2E2E2' :'#F3F3F3'} !important;\">\n                <span class=\"filter-icon\">&#9776;</span>\n                <span class=\"button-label\">Filter</span>\n                ${applied_filters_length != 0 ? '<span class=\"button-label px-1\" style=\"background-color:white;border-radius:65%;\">'+applied_filters_length+'</span>' : ''}\n            </button>\n            <button class=\"btn btn-default btn-sm\" title=\"Clear all filters\" id=\"custom_filter_clear_btn\">\n                <span class=\"filter-icon\">&times;</span>\n            </button>\n        </div>`;\n    if (filters_data.length > 0) {\n        btn_element.innerHTML = btn_html;\n    }else{\n        btn_element.innerHTML = ``;\n    }\n    let custom_filter_btn = root_element.querySelector(\"#custom_filter_btn\");\n    if (custom_filter_btn) {\n        custom_filter_btn.addEventListener('click', () => {\n            filter_popup_component();\n        });\n    }\n    let custom_filter_clear_btn = root_element.querySelector(\"#custom_filter_clear_btn\");\n    if (custom_filter_clear_btn) {\n        custom_filter_clear_btn.addEventListener('click', () => {\n            render_filter_button(filters_json,{})\n            get_number_cards(active_tab)\n            applied_filter_object = {}\n        });\n    }\n}\n\nlet filter_popup_component = async () => {\n    if(filters_json.length > 0){\n        let filter_fields = filters_json.map((filter) => {\n            if (filter.dependent === 1) {\n                let get_query = function () {\n                    return {\n                        filters: {\n                            [filter.depends_on]: dialog.fields_dict[filter.valuefield].value ?? `Select ${filter.valuefield}`\n                        },\n                        page_length: 1000\n                    };\n                };\n                return {\n                    \"label\": filter.label,\n                    \"fieldname\": filter.fieldname,\n                    \"fieldtype\": filter.fieldtype,\n                    \"only_select\": filter.only_select,\n                    \"options\": filter.options,\n                    \"get_query\": get_query\n                };\n            } else {\n                return {\n                    \"label\": filter.label,\n                    \"fieldname\": filter.fieldname,\n                    \"fieldtype\": filter.fieldtype,\n                    \"only_select\": filter.only_select,\n                    \"options\": filter.options\n                };\n            }\n        });\n\n        let dialog = new frappe.ui.Dialog({\n            title: \"Apply Filters\",\n            fields: filter_fields,\n            primary_action_label: 'Apply Filters',\n            async primary_action(values) {\n                applied_filter_object = values;\n                render_filter_button(filters_json,values)\n                render_filter_chips(values)\n                get_number_cards(active_tab,values)\n                dialog.hide()\n            },\n            secondary_action_label: 'Clear Filters',\n            async secondary_action(values) {\n                applied_filter_object = {}\n                render_filter_button(filters_json,{})\n                get_number_cards(active_tab)\n                dialog.clear();\n                dialog.hide();\n            },\n        });\n        for (let key in applied_filter_object) {\n            if (applied_filter_object.hasOwnProperty(key) && dialog.fields_dict[key]) {\n                dialog.fields_dict[key].set_value(applied_filter_object[key]);\n            }\n        }\n        dialog.show()\n    }\n};\n\nlet filter_component = async (tab,applied_filters={}) => {\n    active_tab = tab;\n    try {\n        let filter_element = root_element.querySelector(\"#filters_element\");\n        let filters_data = await callAPI({\n            method: 'myojana.apis.sva_dashboard.get_dashboard_filter',\n            args: {\n                name: tab ?? tabs_json[0]?.name\n            }\n        });\n        filters_json = filters_data;\n        render_filter_button(filters_data)\n    } catch (error) {\n        console.error('Error setting up filter component:', error);\n    }\n};\nlet get_number_cards = async (tab,filters={}) => {\n    number_cards_element = root_element.querySelector(\"#number_cards_element\");\n    number_cards_element.innerHTML = \"\";\n    let number_cards = await callAPI({\n        method: 'myojana.apis.sva_dashboard.get_dashboard_number_cards',\n        args: {\n            name: tab || tabs_json[0]?.name\n        }\n    });\n    let number_cards_html = ``;\n    if (number_cards.length > 0) {\n        for (let card of number_cards) {\n            if(card.is_section == 1){\n                number_cards_element.innerHTML += `\n                <h4 class=\"col-12 underline my-2\" style=\"width:100%;\">\n                  ${card.label}\n                </h4>`;\n            }else{\n                let card_detail = await callAPI({\n                    method: 'frappe.desk.form.load.getdoc',\n                    args: {\n                        doctype: \"Number Card\",\n                        name: card.card\n                    }\n                });\n                let additional_filters = [];\n                let doc = card_detail.docs[0]\n                if(doc.type == 'Document Type'){\n                    if(Object.entries(applied_filter_object).length > 0){\n                        for(let [key,value] of Object.entries(applied_filter_object)){\n                            additional_filters.push([doc.document_type,key,'=',value,false]);\n                        }\n                    }\n                    let filters_json_in = JSON.parse(card_detail.docs[0]?.filters_json || '[]');\n                    let filters = [...filters_json_in,...additional_filters]\n                    let url = '/app/'+doc?.document_type?.toLowerCase()?.split(\" \")?.join(\"-\");\n                    let card_result\n                    try{\n                        card_result = await callAPI({\n                            method: 'frappe.desk.doctype.number_card.number_card.get_result',\n                            args: {\n                                \"doc\": doc,\n                                \"filters\":filters\n                            }\n                        });\n                        let url_array = []\n                        for(let filter of filters){\n                            url_array.push(`${filter[1]}${filter[2]}${filter[3]}`)\n                        }\n                        if(url_array.length){\n                            url += \"?\"+url_array.join(\"&\")\n                        }\n                    }catch(error){\n                        card_result = 'N/A'\n                    }\n                    \n                    let card_percentage_change = await callAPI({\n                        method: 'frappe.desk.doctype.number_card.number_card.get_percentage_difference',\n                        args: {\n                            \"doc\": doc,\n                            \"filters\":filters,\n                            \"result\":card_result.message ?? card_result ?? 0\n                        }\n                    });\n                    number_cards_element.innerHTML += `\n                    <div class=\"col-lg-4 col-xs-12 col-md-6 py-2\" style=\"width:100%;\">\n                      <a href=\"${url}\" class=\"card border rounded-lg\" style=\"height: 90px; font-size: 11px; color:${card.text ?? '#525252'}; text-decoration: none; flex: 1;background-color:${card.background ?? '#FFFFFF'};border: 1px solid ${card.border ?? '#F3F3F3'} !important;\">\n                        <div class=\"p-3\">\n                          <div style=\"font-size: 11.5px; font-weight: 550;\">${card?.label?.toUpperCase() ?? doc?.label?.toUpperCase() ?? doc?.name?.toUpperCase()}</div>\n                          <div class=\"data\" id=\"id_document_no\" style=\"font-size: 22px; font-weight: bold;padding-top:3px;color:${card.number ?? '#525252'};\">${card_result.message ?? card_result ?? 0}</div>\n                          ${card_percentage_change.hasOwnProperty(\"message\") ? `<p class=\"data\" style=\"font-size: 11.5px;color:${card.number ?? \"gray\"};\">${card_percentage_change.message} % since yesterday</p>` : ''}\n                        </div>\n                      </a>\n                    </div>`;\n                }else if(doc.type == \"Report\"){\n                    let url = '/app/query-report/'+doc?.report_name;\n                    let card_result = await callAPI({\n                        method: 'frappe.desk.query_report.run',\n                        args: {\n                            report_name: \"Total ascertaining demands\",\n                            filters: {},\n                            ignore_prepared_report: false,\n                            add_total_row:1\n                        }\n                    });\n                    let count = 0\n                    if (card_result?.result?.length > 0) {\n                        count = card_result.result[card_result.result.length - 1][1];\n                    }\n                    number_cards_element.innerHTML += `\n                    <div class=\"col-lg-4 col-xs-12 col-md-6 py-2\" style=\"width:100%;\">\n                      <a href=\"${url}\" class=\"card border rounded-lg\" style=\"height: 90px; font-size: 11px; color:${card.text ?? '#525252'}; text-decoration: none; flex: 1;background-color:${card.background ?? '#FFFFFF'};border: 1px solid ${card.border ?? '#F3F3F3'} !important;\">\n                        <div class=\"p-3\">\n                          <div style=\"font-size: 11.5px; font-weight: 550;\">${card?.label?.toUpperCase() ?? doc?.label?.toUpperCase() ?? doc?.report_name?.toUpperCase()}</div>\n                          <div class=\"data\" id=\"id_document_no\" style=\"font-size: 22px; font-weight: bold;padding-top:3px;color:${card.number ?? '#525252'};\">${count ?? 'N/A'}</div>\n                        </div>\n                      </a>\n                    </div>`;\n                }\n            }\n        }\n    }\n}\n\nlet tab_click_control = async () => {\n    let tabs = root_element.querySelectorAll(\".tab_span\");\n    tabs.forEach((tab) => {\n        tab.addEventListener('click', async (event) => {\n            tabs.forEach(t => t.classList.remove('tab_active'));\n            event.target.classList.add('tab_active');\n            let tab_name = event.target.getAttribute('name');\n            applied_filter_object = {}\n            filter_component(tab_name)\n            get_number_cards(tab_name)\n        });\n    });\n}\nlet tabs = async () => {\n    await render_tabs();\n    await tab_click_control();\n    await filter_component();\n    await get_number_cards();\n    single_filter_clear_control()\n}\n\ntabs();\n",
  "style": ".tab_span{\n    padding:4px 10px;\n    border-radius:10px;\n    cursor:pointer;\n}\n.tab_span:hover{\n    background-color:#F3F3F3;\n    border-bottom:1px solid gray;\n}\n.tab_active{\n    background-color:#F3F3F3;\n    border-bottom:1px solid gray;\n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<button class=\"btn btn-sm print-btn text-mute\" onClick=\"window.print()\">Print in Pdf</button>",
  "modified": "2024-03-01 12:33:28.602897",
  "name": "print in pdf",
  "private": 0,
  "roles": [],
  "script": "",
  "style": ".print-btn{\n   background: #F3F3F3;\n    padding:4px 10px;\n    border:none;\n    font-size:13px;\n    float:right;\n}"
 }
]